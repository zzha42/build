{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","initBoard","board","i","j","push","useState","setBoard","round","setRound","winner","setWinner","checkWinner","row","col","check","row_inc","col_inc","getValue","undefined","getClass","type","className","map","row_id","col_id","onClick","copy","slice","console","log","placePiece","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAiHeA,MA9Gf,WAEE,IAAMC,EAAY,WAEhB,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BD,EAAMC,GAAK,GACX,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAMC,GAAGE,KAAK,GAGlB,OAAOH,GAVI,EAaaI,mBAASL,KAbtB,mBAaNC,EAbM,KAaCK,EAbD,OAcaD,mBAAS,GAdtB,mBAcNE,EAdM,KAcCC,EAdD,OAeeH,mBAAS,MAfxB,mBAeNI,EAfM,KAeEC,EAfF,KAiBPC,EAAc,SAACC,EAAKC,EAAKZ,GAE7B,OAAIa,EAAMF,EAAKC,EAAK,EAAG,EAAGZ,GAASa,EAAMF,EAAKC,EAAK,GAAI,EAAGZ,GAAS,IAG7Da,EAAMF,EAAKC,EAAK,EAAG,EAAGZ,GAAS,IAG7Ba,EAAMF,EAAKC,GAAM,EAAG,EAAGZ,GAASa,EAAMF,EAAKC,EAAK,GAAI,EAAGZ,GAAS,GAG9Da,EAAMF,EAAKC,EAAK,EAAG,EAAGZ,GAASa,EAAMF,EAAKC,GAAM,GAAI,EAAGZ,GAAS,KAUtEa,EAAQ,SAARA,EAASF,EAAKC,EAAKE,EAASC,EAASf,GAEzC,OAAIgB,EAASL,EAAKC,EAAKZ,KAAWgB,EAASL,EAAMG,EAASF,EAAMG,EAASf,GAChE,EAAIa,EAAMF,EAAMG,EAASF,EAAMG,EAASD,EAASC,EAASf,GAE1D,GAILgB,EAAW,SAACL,EAAKC,EAAKZ,GAC1B,YAAmBiB,IAAfjB,EAAMW,SAA0CM,IAApBjB,EAAMW,GAAKC,IACjC,EAEDZ,EAAMW,GAAKC,IAmChBM,EAAW,SAACC,GAChB,OAAa,IAATA,EACK,MACS,IAATA,EACA,SACF,IAGT,OAAQ,qCACN,mCACGX,GAAU,sBAAKY,UAAU,MAAf,UAAqB,4CAAmB,qBAAKA,UAAW,YAAcF,EAASV,SACxFA,GAAU,sBAAKY,UAAU,MAAf,cAAsB,qBAAKA,UAAW,YAAcF,EAASZ,EAAQ,EAAI,KAAU,6BAAKY,EAASZ,EAAQ,EAAI,GAAK,gBAEhI,qBAAKc,UAAU,YAAf,SACGpB,GAASA,EAAMqB,KAAI,SAACV,EAAKW,GAAN,OAAiB,qBAA0BF,UAAU,MAApC,SAClCT,EAAIU,KAAI,SAACT,EAAKW,GAAN,OAAiB,qBAA0BH,UAAW,YAAcF,EAASlB,EAAMsB,GAAQC,IAAUC,QAAS,YAxC1G,SAACZ,GAClB,IAAIJ,EAQJ,IAJA,IAAIiB,EAAOzB,EAAMqB,KAAI,SAASV,GAC5B,OAAOA,EAAIe,WAGJzB,EAAI,EAAGA,GAAK,EAAGA,IACtB,GAAqB,IAAjBwB,EAAKxB,GAAGW,GAAY,CACtBa,EAAKxB,GAAGW,GAAON,EAAQ,EAAI,EACvBI,EAAYT,EAAGW,EAAKa,KACtBE,QAAQC,IAAItB,EAAQ,EAAI,GACxBG,EAAUH,EAAQ,EAAI,IAExBD,EAASoB,GACTlB,EAASD,EAAQ,GACjB,OAsB+HuB,CAAWN,KAAtG,MAAQA,OADC,MAAQD,QAIzD,8BACGd,GAAU,wBAAQY,UAAU,MAAMI,QAlDrB,WAChBnB,EAASN,KACTQ,EAAS,GACTE,EAAU,OA+CG,2BChGFqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.00644207.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  \n  const initBoard = () => {\n    const board = [];\n    for (let i = 0; i < 6; i++) {\n      board[i] = [];\n      for (let j = 0; j < 7; j++) {\n        board[i].push(0);\n      }\n    }\n    return board\n  }\n\n  const [board, setBoard] = useState(initBoard())\n  const [round, setRound] = useState(1);\n  const [winner, setWinner] = useState(null);\n\n  const checkWinner = (row, col, board) => {\n    // console.log(row, col)\n    if (check(row, col, 0, 1, board) + check(row, col, 0, -1, board) > 2) {\n      return true;\n    } else {\n      if (check(row, col, 1, 0, board) > 2) {\n        return true;\n      } else {\n        if (check(row, col, -1, 1, board) + check(row, col, 1, -1, board) > 2) {\n          return true;\n        } else {\n          if (check(row, col, 1, 1, board) + check(row, col, -1, -1, board) > 2) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  const check = (row, col, row_inc, col_inc, board) => {\n    // console.log(getValue(row, col, board), getValue(row + row_inc, col + col_inc, board))\n    if (getValue(row, col, board) === getValue(row + row_inc, col + col_inc, board)) {\n      return 1 + check(row + row_inc, col + col_inc, row_inc, col_inc, board);\n    } else {\n      return 0;\n    }\n  }\n\n  const getValue = (row, col, board) => {\n    if (board[row] === undefined || board[row][col] === undefined) {\n      return -1;\n    } else {\n      return board[row][col];\n    }\n  }\n\n  const resetGame = () => {\n    setBoard(initBoard());\n    setRound(1);\n    setWinner(null)\n  }\n\n  const placePiece = (col) => {\n    if (winner) {\n      return;\n    }\n\n    let copy = board.map(function(row) {\n      return row.slice();\n    });\n\n    for (let i = 5; i >= 0; i--) {\n      if (copy[i][col] === 0) {\n        copy[i][col] = round % 2 + 1;\n        if (checkWinner(i, col, copy)) {\n          console.log(round % 2 + 1)\n          setWinner(round % 2 + 1)\n        }\n        setBoard(copy)\n        setRound(round + 1);\n        break;\n      }\n    }\n\n  }\n\n\n  const getClass = (type) => {\n    if (type === 1)\n      return 'red';\n    else if (type === 2)\n      return 'yellow';\n    return ''\n  }\n\n  return (<>\n    <header>\n      {winner && <div className=\"wig\"><h1>Winner is </h1><div className={\"col cell \" + getClass(winner)}></div></div>}\n      {!winner && <div className=\"wig\"> <div className={\"col cell \" + getClass(round % 2 + 1)}></div><h1>{getClass(round % 2 + 1) + ' Turn'}</h1></div>}\n    </header>\n    <div className=\"connect-4\">\n      {board && board.map((row, row_id) => <div key={'row' + row_id} className=\"row\">\n        {row.map((col, col_id) => <div key={'col' + col_id} className={\"col cell \" + getClass(board[row_id][col_id])} onClick={() => { placePiece(col_id) }}></div>)}\n      </div>)}\n    </div>\n    <div>\n      {winner && <button className=\"btn\" onClick={resetGame}>Restart</button>}\n    </div>\n  </>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}